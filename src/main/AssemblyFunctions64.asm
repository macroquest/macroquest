;---------------------------------------------------------------------------------------
; These definitions exist to completely bypass the code generated by the compiler. Be sure
; To also include any of these exported symbols in AssemblyFunctions.def so that they are
; exported in the dll.

; MQ2DetourAPI
extern gbAssistComplete
extern ?SetAssist@mq@@YAXPEAE@Z

; MQ2FrameLimiter
extern ?DoThrottleFrameRate@mq@@YA_NXZ
extern __imp___ThrottleFrameRateEnd
extern ?Throttler_Trampoline@mq@@3P6AXXZEA

section .text

;global ?GetAssistParam@mq@@YAXXZ
;?GetAssistParam@mq@@YAXXZ:
;	push rcx
;	; Frame size (0xCPacketScrambler_Detours::ntoh_Detour): 0x38 + 0x8 return address
;	; Adjustment: 0x10 (counteracts pushes)
;	; Local variable in parameter block: 0x20
;	; alloca offset: 0xAEE8
;	mov rcx, [rsp + 0x80 + 0xAEE8]
;	test rcx, rcx
;	jz emptyassist
;	call ?SetAssist@mq@@YAXPEAE@Z
;emptyassist:
;	pop rcx
;	ret

;---------------------------------------------------------------------------------------

; If DoThrottleFrameRate returns false, then it is disabled and we
; want to just call the original code. If it returns true then we
; are engaged with the frame limiter and we want to skip past the
; built-in throttling.
global ?Throttler_Detour@mq@@YAXXZ
?Throttler_Detour@mq@@YAXXZ:
	call ?DoThrottleFrameRate@mq@@YA_NXZ
	test rax, rax
	jz call_to_trampoline
	mov rax, [rel __imp___ThrottleFrameRateEnd]
	jmp [rax]
call_to_trampoline:
	mov rax, [qword ?Throttler_Trampoline@mq@@3P6AXXZEA]
	jmp rax

